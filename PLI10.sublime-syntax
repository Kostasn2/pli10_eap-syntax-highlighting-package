%YAML 1.2
---
name: PLI10
file_extensions:
  - eap
scope: source.pli10

contexts:
  main:
    # Keywords
    - match: '\b(ΑΛΓΟΡΙΘΜΟΣ|ΣΤΑΘΕΡΕΣ|ΔΕΔΟΜΕΝΑ|ΣΥΝΑΡΤΗΣΗ|ΔΙΑΔΙΚΑΣΙΑ|ΑΡΧΗ|ΤΕΛΟΣ|ARRAY|OF|ΤΥΠΟΙ|ΥΠΟΛΟΓΙΣΕ|ΔΙΑΔΙΚΑΣΙΑΣ|ΣΥΝΑΡΤΗΣΗΣ|ΔΙΕΠΑΦΗ|ΕΙΣΟΔΟΣ|ΕΞΟΔΟΣ)\b'
      scope: keyword.control.pli10

    - match: '\b(ΕΑΝ|ΤΟΤΕ|ΑΛΛΙΩΣ|ΓΙΑ|ΕΩΣ|ΜΕ|ΒΗΜΑ|ΕΠΑΝΑΛΑΒΕ|ΕΝΟΣΩ|ΜΕΧΡΙ)\b'
      scope: keyword.control.conditional.pli10

    - match: '\b(ΓΙΑ|ΕΩΣ|ΜΕ|ΒΗΜΑ|ΕΠΑΝΑΛΑΒΕ|ΕΝΟΣΩ|ΜΕΧΡΙ)\b'
      scope: keyword.control.pli10

    # Data types
    - match: '\b(INTEGER|REAL|BOOLEAN|CHAR|STRING|POINTER)\b'
      scope: storage.type.pli10

    # Function names
    - match: '\b(SQRT|LOG|ABS|FLOOR|SIN|COS|POW)\b'
      scope: entity.name.function.pli10

    #Strings (strings enclosed in parentheses for output)
    - match: '\b(ΔΙΑΒΑΣΕ|ΕΚΤΥΠΩΣΕ|TΥΠΩΣΕ|EOLN)\b'
      scope: support.function.pli10


    - match: '\b([a-zA-Z_][a-zA-Z_0-9]*)\b'
      scope: variable.other.pli10

    # Operators
    - match: '\+|-|\*|/|=|:=|<|>|<=|>=|<>|;|,|:|&|MOD|DIV|AND|OR|NOT'
      scope: keyword.operator.pli10

    #Delimiters (array indices and parentheses)
    - match: '\[|\]|\(|\)|\{|\}'
      scope: punctuation.definition.array.pli10

    # Numbers (integer and real numbers)
    - match: '\b\d+(\.\d+)?\b'
      scope: constant.numeric.pli10


    # Strings (double-quoted strings)
    - match: '"'
      scope: punctuation.definition.string.begin.pli10
      push: double_quoted_string

  # Double quoted strings context
  double_quoted_string:
    - meta_scope: string.quoted.double.pli10
    - match: '\\.'  # Matches escape sequences like \n, \t
      scope: constant.character.escape.pli10
    - match: '"'
      scope: punctuation.definition.string.end.pli10
      pop: true


  # Block comments (using /* */)
  - match: '/\*'
    scope: punctuation.definition.comment.begin.pli10
    push: block_comment

  block_comment:
    - meta_scope: comment.block.pli10
    - match: '\*/'
      scope: punctuation.definition.comment.end.pli10
      pop: true
